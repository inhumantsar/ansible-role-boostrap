---
bootstrap_users: []
  # - user_name: adoe
  # - user_name: bdoe
  #   user_state: absent
  # - user_name: cdoe
  #   user_authorized_keys:
  #     - 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5lGUET74UQ/MIJRpvdalskjdfhkuy893rhlkjhsdBZGDseO9s9Qu7v+q17DIByKu1ClENgv7a4hPhPzE+m53mNaFsn12j6AgBXs6stTF+KawsPZ9nJoQrXSSZBfEzPIMQq9vEtgskqgUy0Y7Zse4fLKJ5OnNOaT3TYKQPPnnSw/0V9NbG+EvRHxhsm3h9GxMCNEF+nWtVgzngfRhRtA3SQrvYRPWsKMaTl/GAgDrA0XhHPUgzZa89WMx7QYidOGSbJ/dwXiD+eIQ0/H5VxeraWrL+XhMUl2YYXOKiKtTUR3TeIKC2L4ufccpwq7QuK7TFJnEzUUVNQw== cdoe@localhost'

bootstrap_packages: []
  # - git
  # - sudo
  # - vim

bootstrap_pypi_packages: []

# these are applied immediately
# (ie: during image creation)
bootstrap_ansible_roles: []

# this playbook and its vars are set up as a startup service
# (ie: after image creation)
bootstrap_playbook_repo: ''
bootstrap_playbook_vars: {}

# for the startup service
systemd_service_name: 'ansible-boot'
systemd_service_Unit_Description: 'Run ansible-pull at boot to do post-launch configuration'
# -b: become root (ie: run with sudo)
# -f: run even if the playbook repo couldn't be updated, for running behind firewalls
# -s 15: sleep a random amount of time between 0 and 15s to spread out git operations on large spin-ups
systemd_service_ExecStart: |
  ansible-pull \
  -b -f -s 15 \
  -c local -i "localhost," \
  -e "@/opt/bootstrap/playbook_vars.yml" \
  -U {{ bootstrap_playbook_repo }} \
  -d /opt/bootstrap/playbook
